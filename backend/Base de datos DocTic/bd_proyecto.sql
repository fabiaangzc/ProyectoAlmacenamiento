-- MySQL Script generated by MySQL Workbench
-- Wed Sep 25 20:55:28 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bd_proyecto
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bd_proyecto` ;

-- -----------------------------------------------------
-- Schema bd_proyecto
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bd_proyecto` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `bd_proyecto` ;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`categoria`
-- -----------------------------------------------------
CREATE TABLE categoria (
  idCategoria int NOT NULL,
  nombre varchar(100) NOT NULL,
  SubIdCategoria int NULL,
  PRIMARY KEY (idCategoria),
  KEY SubIdCategoria (SubIdCategoria),
  CONSTRAINT categoria_ibfk_1 FOREIGN KEY (SubIdCategoria) REFERENCES categoria (idCategoria) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(80) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `nickname` VARCHAR(20) NOT NULL,
  `ciudad` VARCHAR(30) DEFAULT NULL,
  `departamento` VARCHAR(30) DEFAULT NULL,
  PRIMARY KEY (`idUsuario`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `nickname_UNIQUE` (`nickname` ASC)
) ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bd_proyecto`.`documento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`documento` (
  `idDocumento` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(300) NOT NULL,
  `url` VARCHAR(1000) NULL DEFAULT NULL,
  `visibilidad` ENUM('Publico', 'Privado') NOT NULL,
  `idCategoria` INT NOT NULL,
  `fechaCreacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idDocumento`),
  UNIQUE INDEX `descripcion` (`descripcion` ASC) VISIBLE,
  INDEX `fk_documento_categoria1_idx` (`idCategoria` ASC) VISIBLE,
  CONSTRAINT `fk_documento_categoria1`
    FOREIGN KEY (`idCategoria`)
    REFERENCES `bd_proyecto`.`categoria` (`idCategoria`)
    ON DELETE CASCADE
)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`comentario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS comentario (
    idComentario INT NOT NULL AUTO_INCREMENT,
    fecha DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    idUsuario INT NOT NULL,
    idDocumento INT NOT NULL,
    contenido VARCHAR(300) NOT NULL,
    SubIdComentario INT NULL,
    PRIMARY KEY (idComentario),
    KEY SubIdComentario (SubIdComentario),
    FOREIGN KEY (SubIdComentario) REFERENCES comentario (idComentario) ON DELETE CASCADE,
    FOREIGN KEY (idUsuario) REFERENCES usuario (idUsuario) ON DELETE CASCADE,
    FOREIGN KEY (idDocumento) REFERENCES documento (idDocumento) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`contrasena`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`contrasena` (
  `idContrasena` INT NOT NULL AUTO_INCREMENT,
  `clave` VARCHAR(20) NOT NULL,
  `estado` ENUM('Activa', 'Expirada') NOT NULL,
  `fechaCreacion` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `idUsuario` INT NOT NULL,
  `preguntaSecreta` VARCHAR(100) NOT NULL,
  `respuestaSecreta` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idContrasena`),
  UNIQUE INDEX `clave_UNIQUE` (`clave` ASC),
  INDEX `fk_contrasena_usuario1_idx` (`idUsuario` ASC),
  CONSTRAINT `fk_contrasena_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`)
    ON DELETE CASCADE
) ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bd_proyecto`.`puededescargar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`puededescargar` (
  `idDescarga` INT NOT NULL AUTO_INCREMENT,
  `idDocumento` INT NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `idUsuario` INT NOT NULL,
  PRIMARY KEY (`idDescarga`),
  INDEX `idDocumento` (`idDocumento` ASC) VISIBLE,
  INDEX `fk_puededescargar_usuario1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `puededescargar_ibfk_1`
    FOREIGN KEY (`idDocumento`)
    REFERENCES `bd_proyecto`.`documento` (`idDocumento`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_puededescargar_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`puedeescribir`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`puedeescribir` (
  `idEscribir` INT NOT NULL AUTO_INCREMENT,
  `idDocumento` INT NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `rol` ENUM('Publica', 'Coautor') NOT NULL DEFAULT 'Publica',
  `idUsuario` INT NOT NULL,
  PRIMARY KEY (`idEscribir`),
  INDEX `fk_puedeescribir_usuario1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_puedeescribir_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`) ON DELETE CASCADE,
  CONSTRAINT `fk_puedeescribir_documento`
    FOREIGN KEY (`idDocumento`)
    REFERENCES `bd_proyecto`.`documento` (`idDocumento`)
    ON DELETE CASCADE
)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bd_proyecto`.`historialacciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`historialacciones` (
  `idHistorial` INT NOT NULL AUTO_INCREMENT,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `tipoAccion` ENUM('Visualizar', 'Descarga', 'Escribir') NOT NULL,
  `idUsuario` INT NOT NULL,
  `idDocumento` INT NOT NULL,
  PRIMARY KEY (`idHistorial`),
  INDEX `fk_historialacciones_usuario_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_historialacciones_documento_idx` (`idDocumento` ASC) VISIBLE,
  CONSTRAINT `fk_historialacciones_usuario`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_historialacciones_documento`
    FOREIGN KEY (`idDocumento`)  -- Mantengo el nombre `fk_historialacciones_documento` aquÃ­
    REFERENCES `bd_proyecto`.`documento` (`idDocumento`)
    ON DELETE CASCADE
)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`puedevisualizar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_proyecto`.`puedevisualizar` (
  `idVisualizacion` INT NOT NULL auto_increment,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `idUsuario` INT NOT NULL,
  `idDocumento` INT NOT NULL,
  PRIMARY KEY (`idVisualizacion`),
  INDEX `fk_puedevisualizar_usuario1_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_puedevisualizar_documento1_idx` (`idDocumento` ASC) VISIBLE,
  CONSTRAINT `fk_puedevisualizar_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_puedevisualizar_documento1`
    FOREIGN KEY (`idDocumento`)
    REFERENCES `bd_proyecto`.`documento` (`idDocumento`)
    ON DELETE CASCADE
)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `bd_proyecto`.`valoracion`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `bd_proyecto`.`valoracion` (
  `idValoracion` INT NOT NULL AUTO_INCREMENT,
  `idUsuario` INT NOT NULL,
  `idDocumento` INT NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `puntuacion` TINYINT CHECK (puntuacion >= 1 AND puntuacion <= 5) NOT NULL, 	 	
  PRIMARY KEY (`idValoracion`),
  INDEX `idUsuario` (`idUsuario` ASC) VISIBLE,
  INDEX `idDocumento` (`idDocumento` ASC) VISIBLE,
  CONSTRAINT `valoracion_ibfk_1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `bd_proyecto`.`usuario` (`idUsuario`) ON DELETE CASCADE,
  CONSTRAINT `valoracion_ibfk_2`
    FOREIGN KEY (`idDocumento`)
    REFERENCES `bd_proyecto`.`documento` (`idDocumento`) ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- --------------------------------------------------
-- TRIGGERS 
-- --------------------------------------------------
-- --------------------------------------------------
-- Trigger puede escribir 
-- --------------------------------------------------
DELIMITER //
CREATE TRIGGER after_insert_puedeescribir
AFTER INSERT ON puedeescribir
FOR EACH ROW
BEGIN
  INSERT INTO historialacciones (idUsuario, idDocumento, tipoAccion, fecha)
  VALUES (NEW.idUsuario, NEW.idDocumento, 'Escribir', NEW.fecha);
END//
DELIMITER ;

-- --------------------------------------------------------------------------------------
-- Trigger para expiraciÃ³n de contraseÃ±as y expiraciÃ³n automÃ¡tica de contraseÃ±as antiguas 
-- --------------------------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER before_insert_contrasena 
BEFORE INSERT ON contrasena 
FOR EACH ROW 
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM contrasena 
        WHERE idUsuario = NEW.idUsuario 
        AND clave = NEW.clave 
        ORDER BY fechaCreacion DESC 
        LIMIT 3
    ) THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'La contraseÃ±a ha sido utilizada recientemente. Elige otra contraseÃ±a.';
    END IF;

END//
DELIMITER ;


-- ---------------------------------------------
-- Trigger para controlar las visualizaciones
-- ---------------------------------------------
DELIMITER //
CREATE TRIGGER before_insert_puedevisualizar
BEFORE INSERT ON puedevisualizar
FOR EACH ROW
BEGIN
   IF NOT EXISTS (
       SELECT 1 FROM documento
       WHERE idDocumento = NEW.idDocumento
       AND visibilidad = 'Publico'
   ) THEN
      SIGNAL SQLSTATE '45000' 
      SET MESSAGE_TEXT = 'El usuario no tiene permitido visualizar este documento.';
   END IF;
END//
DELIMITER ;

-- ---------------------------------------------
-- Trigger para controlar las descargas
-- ---------------------------------------------
DELIMITER //
CREATE TRIGGER before_insert_puededescargar
BEFORE INSERT ON puededescargar
FOR EACH ROW
BEGIN
   IF NOT EXISTS (
       SELECT 1 FROM documento
       WHERE idDocumento = NEW.idDocumento
       AND visibilidad = 'Publico'
   ) THEN
      SIGNAL SQLSTATE '45000' 
      SET MESSAGE_TEXT = 'El usuario no tiene permitido descargar este documento.';
   END IF;
END//
DELIMITER ;

-- ---------------------------------------------
-- Trigger para controlar quien puede escribir--
-- ---------------------------------------------
DELIMITER //
CREATE TRIGGER before_insert_puedeescribir
BEFORE INSERT ON puedeescribir
FOR EACH ROW
BEGIN
   IF NEW.rol != 'Publica' THEN
      SIGNAL SQLSTATE '45000' 
      SET MESSAGE_TEXT = 'El usuario no tiene permitido escribir en este documento.';
   END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER after_insert_puededescargar_historial
AFTER INSERT ON puededescargar
FOR EACH ROW
BEGIN
    INSERT INTO historialacciones (fecha, tipoAccion, idUsuario, idDocumento)
	VALUES (NEW.fecha, 'Descarga', NEW.idUsuario, NEW.idDocumento);
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER after_insert_puedevisualizar_historial
AFTER INSERT ON puedevisualizar
FOR EACH ROW
BEGIN
  INSERT INTO historialacciones (fecha, tipoAccion, idUsuario, idDocumento)
  VALUES (NEW.fecha, 'Visualizar', NEW.idUsuario, NEW.idDocumento);
END//
DELIMITER ;


-- Trigger historial de descargas, valoraciones promedios, historial de visualizaciones y total comentarios

ALTER TABLE documento
ADD COLUMN valoracionPromedio DECIMAL(3, 2) DEFAULT 0,
ADD COLUMN historialDescargas INT DEFAULT 0,
ADD COLUMN historialVisualizaciones INT DEFAULT 0,
ADD COLUMN TotalComentarios INT DEFAULT 0;

-- Trigger para actualizar el promedio de valoraciones
DELIMITER //
CREATE TRIGGER after_insert_valoracion
AFTER INSERT ON valoracion
FOR EACH ROW
BEGIN
  UPDATE documento
  SET valoracionPromedio = (
    SELECT ROUND(AVG(v.puntuacion), 1)
    FROM valoracion v
    WHERE v.idDocumento = NEW.idDocumento
  )
  WHERE idDocumento = NEW.idDocumento;
END//
DELIMITER ;

-- Trigger para actualizar el historial de descargas
DELIMITER //
CREATE TRIGGER after_insert_puededescargar
AFTER INSERT ON puededescargar
FOR EACH ROW
BEGIN
  UPDATE documento
  SET historialDescargas = (
    SELECT COUNT(*)
    FROM puededescargar pd
    WHERE pd.idDocumento = NEW.idDocumento
  )
  WHERE idDocumento = NEW.idDocumento;
END//
DELIMITER ;

-- Trigger para actualizar el historial de visualizaciones
DELIMITER //
CREATE TRIGGER after_insert_puedevisualizar
AFTER INSERT ON puedevisualizar
FOR EACH ROW
BEGIN
  UPDATE documento
  SET historialVisualizaciones = (
    SELECT COUNT(*)
    FROM puedevisualizar pv
    WHERE pv.idDocumento = NEW.idDocumento
  )
  WHERE idDocumento = NEW.idDocumento;
END//
DELIMITER ;

-- Trigger para actualizar el total de comentarios
DELIMITER //
CREATE TRIGGER after_insert_comentario
AFTER INSERT ON comentario
FOR EACH ROW
BEGIN
  UPDATE documento
  SET TotalComentarios = (
    SELECT COUNT(*)
    FROM comentario c
    WHERE c.idDocumento = NEW.idDocumento
  )
  WHERE idDocumento = NEW.idDocumento;
END//
DELIMITER ;

-- Trigger para controlar quien puede valorar
DELIMITER //
CREATE TRIGGER before_insert_valoracion
BEFORE INSERT ON valoracion
FOR EACH ROW
BEGIN
   IF EXISTS (
       SELECT 1 FROM documento
       WHERE idDocumento = NEW.idDocumento
       AND visibilidad = 'Privado'
   ) THEN
      SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'No se pueden realizar valoraciones en este documento';
   END IF;
END //
DELIMITER ;

-- Inserciones en la tabla categoria

INSERT INTO `bd_proyecto`.`categoria` (`idCategoria`, `nombre`, `SubIdCategoria`)
VALUES
    (1, 'Desarrollo web', NULL),
    (2, 'Base de datos relacionales', 1),
    (3, 'Base de datos NoSQL', 2),
    (4, 'Programacion', 3),
    (5, 'Analitica de datos', NULL),
    (6, 'Visualizacion de datos', 5),
    (7, 'Inteligencia artificial', 6),
    (8, 'Machine learning', 7),
    (9, 'Base de datos relacionales', NULL),
    (10, 'Programacion', 3);

-- Inserciones en la tabla usuario
INSERT INTO `bd_proyecto`.`usuario` (`nombre`, `email`, `nickname`, `ciudad`, `departamento`) 
VALUES 
('Juan Perez', 'juan.perez@example.com', 'jperez', 'Cali', 'Valle del Cauca'),
('Ana Gomez', 'ana.gomez@example.com', 'agomez', 'BogotÃ¡', 'Cundinamarca'),
('Carlos Sanchez', 'carlos.sanchez@example.com', 'csanchez', 'MedellÃ­n', 'Antioquia'),
('Lucia Martinez', 'lucia.martinez@example.com', 'lmartinez', 'Barranquilla', 'AtlÃ¡ntico'),
('Pedro Ramirez', 'pedro.ramirez@example.com', 'pramirez', 'Manizales', 'Caldas'),
('Camila Torres', 'camila.torres@example.com', 'ctorres', 'Pereira', 'Risaralda'),
('Miguel Lopez', 'miguel.lopez@example.com', 'mlopez', 'Cartagena', 'BolÃ­var'),
('Laura Fernandez', 'laura.fernandez@example.com', 'lfernandez', 'Cali', 'Valle del Cauca'),
('Jorge Herrera', 'jorge.herrera@example.com', 'jherrera', 'Bucaramanga', 'Santander'),
('Mariana Rojas', 'mariana.rojas@example.com', 'mrojas', 'Neiva', 'Huila');

-- Inserciones en la tabla documento
INSERT INTO `bd_proyecto`.`documento` (`descripcion`, `url`, `visibilidad`, `idCategoria`, `fechaCreacion`) 
VALUES
('Documento sobre desarrollo web', 'https://example.com/doc1', 'Publico', 1, '2024-08-01 10:00:00'),
('Bases de datos relacionales', 'https://example.com/doc2', 'Privado', 2,'2024-08-02 11:00:00'),
('NoSQL para principiantes', 'https://example.com/doc3', 'Publico', 3,'2024-08-03 12:00:00'),
('GuÃ­a de programaciÃ³n en Python', 'https://example.com/doc4', 'Privado', 4,'2024-08-04 13:00:00'),
('IntroducciÃ³n a la analÃ­tica de datos', 'https://example.com/doc5', 'Publico', 5, '2024-08-05 14:00:00'),
('VisualizaciÃ³n de datos con Tableau', 'https://example.com/doc6', 'Privado', 6,'2024-08-06 15:00:00'),
('Inteligencia artificial bÃ¡sica', 'https://example.com/doc7', 'Publico', 7, '2024-08-07 16:00:00'),
('Machine Learning aplicado', 'https://example.com/doc8', 'Privado', 8, '2024-08-08 17:00:00'),
('Desarrollo avanzado en web', 'https://example.com/doc9', 'Publico', 1, '2024-08-09 18:00:00'),
('Bases de datos en la nube', 'https://example.com/doc10', 'Privado', 2, '2024-08-10 19:00:00'),
('Manual de usuario avanzado', 'https://example.com/doc11', 'Publico', 7, '2024-09-01 09:00:00'),
('Reporte de ventas Q3', 'https://example.com/doc12', 'Privado', 5, '2024-09-02 10:00:00'),
('GuÃ­a de Machine Learning', 'https://example.com/doc13', 'Publico', 8, '2024-09-03 11:00:00'),
('PresentaciÃ³n de resultados', 'https://example.com/doc14', 'Privado', 3,'2024-09-04 12:00:00'),
('Informe de Inteligencia Artificial', 'https://example.com/doc15', 'Publico', 6, '2024-09-05 13:00:00');

-- Inserciones en la tabla puedeescribir
INSERT INTO `bd_proyecto`.`puedeescribir` (`fecha`, `rol`, `idUsuario`, `idDocumento`) 
VALUES 
('2024-09-25 10:00:00', 'Publica', 1, 1),
('2024-09-25 11:00:00', 'Publica', 2, 2),
('2024-09-25 12:00:00', 'Publica', 3, 3),
('2024-09-25 13:00:00', 'Publica', 4, 4),
('2024-09-25 14:00:00', 'Publica', 5, 5),
('2024-09-25 15:00:00', 'Publica', 6, 6),
('2024-09-25 16:00:00', 'Publica', 7, 7),
('2024-09-25 17:00:00', 'Publica', 8, 8),
('2024-09-25 18:00:00', 'Publica', 9, 9),
('2024-09-25 19:00:00', 'Publica', 10, 10);

-- Inserciones en la tabla comentario
INSERT INTO `bd_proyecto`.`comentario` (`idComentario`, `fecha`, `idUsuario`, `idDocumento`, `contenido`, `SubIdComentario`)
VALUES
    (1, '2024-09-25 10:30:00', 1, 1, 'Excelente documento, muy claro.', NULL),
    (2, '2024-09-25 11:00:00', 2, 2, 'Me ayudÃ³ bastante con mi proyecto.', NULL),
    (3, '2024-09-25 11:30:00', 3, 3, 'Â¿PodrÃ­as agregar mÃ¡s detalles sobre MongoDB?', NULL),
    (4, '2024-09-25 12:00:00', 4, 4, 'Muy Ãºtil para programadores novatos.', NULL),
    (5, '2024-09-25 12:30:00', 5, 5, 'InformaciÃ³n completa y bien estructurada.', 1),
    (6, '2024-09-25 13:00:00', 6, 6, 'Excelente explicaciÃ³n de los grÃ¡ficos.', NULL),
    (7, '2024-09-25 13:30:00', 7, 7, 'Â¿PodrÃ­as compartir ejemplos prÃ¡cticos?', 2),
    (8, '2024-09-25 14:00:00', 8, 8, 'Buen material, lo recomendarÃ©.', NULL),
    (9, '2024-09-25 14:30:00', 9, 9, 'Gran contenido para desarrolladores avanzados.', NULL),
    (10, '2024-09-25 15:00:00', 10, 10, 'Me gustarÃ­a ver mÃ¡s sobre bases de datos distribuidas.', NULL);



-- Inserciones en la tabla valoracion
INSERT INTO `bd_proyecto`.`valoracion` (`idUsuario`, `idDocumento`, `fecha`, `puntuacion`) 
VALUES
(1, 1, '2024-09-27 08:00:00', 5),
(2, 1, '2024-09-27 08:30:00', 4),
(3, 1, '2024-09-27 09:00:00', 3),
(4, 1, '2024-09-27 09:30:00', 4),
(5, 1, '2024-09-27 10:00:00', 5),
(6, 1, '2024-09-27 10:30:00', 4),
(7, 1, '2024-09-27 11:00:00', 3),
(8, 1, '2024-09-27 11:30:00', 5),
(9, 1, '2024-09-27 12:00:00', 4),
(10, 1, '2024-09-27 12:30:00', 5),
(1, 3, '2024-09-27 13:00:00', 5),
(2, 3, '2024-09-27 13:30:00', 4),
(3, 3, '2024-09-27 14:00:00', 4),
(4, 3, '2024-09-27 14:30:00', 5),
(5, 3, '2024-09-27 15:00:00', 5),
(6, 5, '2024-09-27 15:30:00', 4);

-- CuÃ¡l es el departamento que mÃ¡s documentos descargan de cada categorÃ­a?
SELECT c.nombre AS Categoria, u.departamento, COUNT(pd.idDescarga) AS TotalDescargas
FROM puededescargar pd
JOIN documento doc ON pd.idDocumento = doc.idDocumento
JOIN categoria c ON doc.idCategoria = c.idCategoria
JOIN usuario u ON pd.idUsuario = u.idUsuario
GROUP BY c.nombre, u.departamento
HAVING COUNT(pd.idDescarga);

-- Â¿Cual es el usuario que ha realizado mÃ¡s comentarios en cada categorÃ­a?
SELECT c.nombre, u.nombre AS Usuario, COUNT(co.idComentario) AS TotalComentarios
FROM comentario co
JOIN documento doc ON co.idDocumento = doc.idDocumento
JOIN categoria c ON doc.idCategoria = c.idCategoria
JOIN usuario u ON co.idUsuario = u.idUsuario
GROUP BY c.nombre, u.nombre
HAVING COUNT(co.idComentario);

-- Â¿CuÃ¡l es el documento con mÃ¡s comentarios realizados?
SELECT d.descripcion AS TituloDocumento, COUNT(c.idComentario) AS TotalComentarios
FROM comentario c
JOIN documento d ON c.idDocumento = d.idDocumento
GROUP BY d.idDocumento
ORDER BY TotalComentarios DESC
LIMIT 1;

-- Â¿CuÃ¡l es el documento mÃ¡s descargado?
SELECT d.descripcion AS TituloDocumento, COUNT(pd.idDescarga) AS TotalDescargas
FROM puededescargar pd
JOIN documento d ON pd.idDocumento = d.idDocumento
GROUP BY d.idDocumento
ORDER BY TotalDescargas DESC
LIMIT 1;

-- Â¿CuÃ¡l es la categorÃ­a con mÃ¡s documentos?
SELECT c.nombre, COUNT(d.idDocumento) AS TotalDocumentos
FROM categoria c
LEFT JOIN documento d ON c.idCategoria = d.idCategoria
GROUP BY c.nombre
ORDER BY TotalDocumentos DESC
LIMIT 1;


-- Â¿CuÃ¡l es la categorÃ­a con menos documentos?
SELECT c.nombre, COUNT(d.idDocumento) AS TotalDocumentos
FROM categoria c
LEFT JOIN documento d ON c.idCategoria = d.idCategoria
GROUP BY c.nombre
ORDER BY TotalDocumentos ASC
LIMIT 1;

-- Â¿CuÃ¡les son los documentos que tienen una valoraciÃ³n superior a 4 de cada categorÃ­a?
SELECT c.nombre, 
       d.descripcion AS TituloDocumento, 
       ROUND(AVG(v.puntuacion), 1) AS PromedioValoracion
FROM categoria c
JOIN documento d ON c.idCategoria = d.idCategoria
JOIN valoracion v ON d.idDocumento = v.idDocumento
GROUP BY d.idDocumento, c.nombre
HAVING PromedioValoracion > 4;

-- Â¿QuÃ© usuarios no tienen permitido descargar documentos y quÃ© documentos no pueden descargar?

SELECT u.nombre AS NombreUsuario, d.descripcion AS TituloDocumento
FROM usuario u
JOIN documento d ON d.idDocumento NOT IN (
    SELECT pd.idDocumento
    FROM puededescargar pd
    WHERE pd.idUsuario = u.idUsuario
)
GROUP BY u.idUsuario, d.idDocumento;

-- Â¿CuÃ¡l fue el dÃ­a que mÃ¡s documentos fueron creados?
SELECT DATE(d.fechaCreacion) AS Fecha, COUNT(d.idDocumento) AS TotalDocumentos
FROM documento d
GROUP BY fecha
ORDER BY TotalDocumentos DESC
LIMIT 1;

-- Agrupar los documentos que tienen el mismo nÃºmero de valoraciones y el mismo nÃºmero de comentarios.
SELECT d.descripcion AS TituloDocumento, COUNT(v.idValoracion) AS TotalValoraciones, COUNT(c.idComentario) AS TotalComentarios
FROM documento d
LEFT JOIN valoracion v ON d.idDocumento = v.idDocumento
LEFT JOIN comentario c ON d.idDocumento = c.idDocumento
GROUP BY d.idDocumento
HAVING TotalValoraciones = TotalComentarios;
